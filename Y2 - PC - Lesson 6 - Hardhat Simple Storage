`Hardhat` 
- it's the most popular smart contract framework 
- is a development environment for using JS
- has really nice features for testing and debugging 

`Hardhat setup`
- Documentation: https://hardhat.org/
- we need to initialize a *node* project first
	- `npm init` or `yarn init` 
- after we can run the command to initialize a *hardhat project*
	- `npm install --save-dev hardhat` or `yarn add --dev hardhat` 
- after we run 
	- `npx hardhat` or `yarn hardhat` (everytime is used *npx* we can use *yarn* instead)
	- select *Create an empty hardhat.config.js* or we use the *sample project js* 
	- we're all done to start using hardhat !
	- *IMPORTANT*: after we run the first time the command `yarn hardhat` if we run it again, it'll be displayed to us a list of all the different commands that we can use with hardhat
	- *IF YOU* run into an error, it can be because you already have a *hardhat.config.js* file in a folder in the project, we can find it running the command `npx hardhat --vervbose` or `yarn hardhat --verbose` and it will spit out the path where this file is in
	- *ALSO* remember of always running `npm install` or `yarn install` 

`Hardhat's architecture`
- is designed around the concepts of tasks and plugins 
- the core of hardhat's functionality comes from plugins, which we are free to choose the ones that we want to use

	`Tasks`
	- everytime we're running hardhat from the terminal, we're running a new task
	- EG: when we're running the `npx hardhat compile` command we're running the *compile* task
	- to see the currently available tasks in our project we can run `npx hardhat` 
	- we can also get more help about the tasks running the command `npx hardhat help [task]
		- some of them are (and all of them we run with `yarn hadhat [task]` or `npm ...`)
			- *accounts* : prints the list of the accounts
			- *check* : check whatever you need
			- *clean* : clears the cache and deletes all artifacts
			- *compile* : compiles the entire project, building all artifacts
			- *console* : opens hardhat console
			- *flatten* : prints contracts and their depencencies
			- *help* : shows the help
			- *node* : starts a JSON-RPC server on top of Hardhat network
			- *run* : runs a user-defined script after compiling the project
			- *test* : runs mocha tests
	
	`Plugins`
	- hardhat is not strict to *what* you'll have to use to build your project, but it comes with some built in defaults. All of them we can *override*
	- most of the times we will consume a plugin to use some tool that we need
	- one of the recommended plugins by *Hardhat* itself is the `@nomicfoundation/hardhat-toolbox`. To install it we run this command on the project directory
		- `npm install --save-dev @nomicfoundation/hardhat-toolbox` 
		- after we'll add the *require* line inside our `hardhat.config.js` 
			- `require("@nomicfoundation/hardhat-toolbox");` 
	
	`Writting and compiling smart contracts` 
	- we would store our contracts in a folder calles `contracts` 
	- to compile a contract using hardhat we use the command below
		- `npx hardhat compile`  or `yarn hardhat compile` 

	`Testing contracts` 
	- we use *ethersjs* to interact with the Ethereum contract
	- we use *Mocha* as our test runner
	- we would create a new directory called `tests` to store the tests
		- for each contract that we're going to create a test, we would create a file with the same name of the file with the extension *.sol* but with the extension *.js*
	- to run the test we created we use the command below
		- `npx hardhat test` 
	- `fixtures` 
		- is a setup function tha is runned only the first time it's invoked
		- this will help us to have tests that have a better performance, because after the first execution of a *fixture* the next ones hardhat will only reset the state of the network to what it was right after the *fixture* was initially executed
		- below we have a example of how to declare a *fixture* and use it more than once, using the `loadFixture` function
```javascript 
const { loadFixture } = require("@nomicfoundation/hardhat-network-helpers"); const { expect } = require("chai");

describe("Token contract", function () {
  async function deployTokenFixture() {
	const Token = await ethers.getContractFactory("Token"); 
	const [owner, addr1, addr2] = await ethers.getSigners(); 
	const hardhatToken = await Token.deploy(); 
	await hardhatToken.deployed(); 
	
	// Fixtures can return anything you consider useful for your tests 
	return { Token, hardhatToken, owner, addr1, addr2 };
  }

  it("Should assign the total supply of tokens to the owner", async function () { 
	const { hardhatToken, owner } = await loadFixture(deployTokenFixture); 
	const ownerBalance = await hardhatToken.balanceOf(owner.address); 
	
	expect(await hardhatToken.totalSupply()).to.equal(ownerBalance); });
  }

  it("Should transfer tokens between accounts", async function () {
	const { hardhatToken, owner, addr1, addr2 } = await loadFixture( deployTokenFixture );

	// Transfer 50 tokens from owner to addr1 
	await expect( hardhatToken.transfer(addr1.address, 50) ).to.changeTokenBalances(hardhatToken, [owner, addr1], [-50, 50]);
  
	// Transfer 50 tokens from addr1 to addr2 // We use .connect(signer) to send a transaction from another account
	await expect( hardhatToken.connect(addr1).transfer(addr2.address, 50)  ).to.changeTokenBalances(hardhatToken, [addr1, addr2], [-50, 50]);
  }); 
  
});
```

`Debugging with Hardhat network` 
- when running our contracts we can log messages and contract variables calling `console.log()` in the solidity code, we just need to import `hardhat/console.sol` 
- we can use just as we use in a JS file
```javascript
console.log( "Transferring from %s to %s %s tokens", msg.sender, to, amount );
```

`Deploying Simple Storage`
- we're going to use a script file called `deploy.js`
- when deploying before we needed to get our compile contract data, and with hardhat we can do it in more ways
	- different from what we did using ethers in the other project, as hardhat wraps `ethers` inside their own package. We're going to import `ethers` from `hardhat`, so if you look inside the `package.json` you'll see the package `@nomiclabs/hardhat-ethers`
	- now a great advantage of using `ethers` from *hardhat* is that when getting a *contractFactory* using ethers imported from their package, we needed to import also the *abi* and *binary* of the contract to be able to create the contractFactory, but using ethers from *hardhat* it already knows that the contract, in our case *SimpleStorage* is compiled and ready to deploy. We just need to use the line below to create a contractFactory
		- `const SimpleStorageFactory = await ethers.getContractFactory("SimpleStorage")
- the command to run the deploy script is 
	- `yarn hardhat run scripts/deploy.js` 

`Networks in hardhat`
- hardhat has a tool built in that's called *Hardhat network* that's a local Ethereum network node designed to development. like a *Ganache* 
- by *default* all the commands we run using hardhat are runned in the *Hardhat Network*  
- if we go to the file `hardhat.config.js` we can add more information about our default networks that we're going to run our code, if we don't specify one by default it implicitly uses *defaultNetwork: "hardhat"* 
	- this default network from hardhat comes with a default *RPC* and *Private Key* so this is why when we deploy to the default network we don't need to set these in our code
	- if we want to add more networks, we can add a object called *networks* and add the info about each new one
```javascript
	module.exports = {
		defaultNetwork: "hardhat",
		networks: {
			goerli: {
				url: url for goerli RPC from alchemy,
				account: [process.env.GOERLI_PRIVATE_KEY],
				chainId: 5,
			}
		}
	}
```
- if you want to specify the network that you're going to deploy your contract you can do it by explicitly describing like the command below 
	- `yarn hardhat run scripts/deploy.js --network [name of network]` 

`Programatic Verification - (verification for the contract in the Etherscan` 
- we can add some code to automatically verify our contract right after we deploy
- we're going to add a new function to do the verification for us in our *deploy.js* file
	- the function will be `async function verify(contractAddress, args)` where the *contractAddress* it's well, the contract address that was deployed and the *args* would be arguments for the constructor, when we have we will pass it in there
	- for Etherscan, they have a section on their website for *documentation on API* that will allow us to interact with them to verify automatically
	- we can do this by using the API from etherscan, but we actually can use a plugin from *hardhat* to do this easily
		- we will use the `@nomiclabs/hardhat-etherscan` plugin to help us
		- to install we use `yarn add --dev @nomiclabs/hardhat-etherscan` 
		- after we will go to the *hardhat.config.js* and add the require for the plugin (or import for typescript )
			- `require("@nomiclabs/hardhat-etherscan")` 
			- we still are going to need a *API Key* from Etherscan
				- we need to sign in into Etherscan to grab our API Key
				- after we create a new API Key we go back to our project and add to our *.env* file so we can use it
				- we go back to our *hardhat.config.js* and add a new section called *etherscan* to add the *apiKey* 
		- *AFTER WE INSTALLED* the plugin, if we run `yarn hardhat` we have a new command enabled that is *verify*, because when we run the command *hardhat* it looks in the project for plugins that will enable new tasks
		- we can now use this new command to use the task to manually verify the contract 
		- *BUT* we're gonna do this programatically, and we can in our code run *any task* just by using a run package
			- we just need to import the *run* from *hardhat*, in the same *require* that we did for *ethers* in the *deploy.js* file. This *run* will allow us to run any hardhat task from our code
			- the *verify:verify* it's us describing the task and it's sub-task, that's going to be `verify` . The second parameter in the `run` is the actual parameters in a object
			- when we use the *verify* function we're only going to want to run this on networks that we are able to verify our contract so we're going to verify if the network we're using is a valid one
				- for this, we can import *network* from the *hardhar* inside our *deploy.js* 
				- then we're goin to make an IF statement to check the *chainId* using *network.config.chainId* to see if we're on the testnet (goerli chainId is 5)
				- we're also going to check if the variable with the Etherscan API exists to then run our *verify* function
```javascript 
			await run("verify:verify", {
				address: contractAddress,
				constructorArguments: args,
			})
```

`Interacting with contracts in Hardhat`
- it's pretty much the same as it was with ethers, we're just going to use the variable *simpleStorage* that's where we stored the contract after deploying and call the *retrieve* and *store* functions

`Artifacts Troubleshooting` 
- if we run into problems that display in the error message something to do with *artifacts* we can delete the *artifacts* and *cache* folders or run `yarn hardhat clean` that it'll do both and just try to run the previous command from hardhat again 

`Custom hardhat Tasks` 
- we can also write our own custom tasks for hardhat
- we can get more information in https://hardhat.org/guides/create-task.html
- we can declare a new task inside our file *hardhat.config.js* but typically it's created a folder with the name `tasks` where we can store our tasks
- we will create the task *block-number.js* that will tell us the number of the current block in the blockchain we're connected.
	- when we define a task we can pass some things, 
		- *setArguments* : is where we define the arguments that the task is going to take
		- *setAction* is *what* the task will do
	- after we finish building our task, we need to declare it inside the *hardhat.config.js* 
		- `require("./tasks/block-number")` 

`Hardhat Localhost Node (running a local blockchain that doesn't die after the script is done)`
- we notice that using the *hardhat* network everytime we deploy a contract, when we finish the task we run the network get's deleted and restarts from scratch *every single time* 
- *BUT* theres a similar way to we run a *hardhat* network with a UI similar to what we had with *Ganache* in Truffle
	- for this, we can run `yarn hardhat node` and it'll spin up a local node from hardhat network in our terminal, just like ganache. Will be our *LOCALHOST* node, wich differs from *hardhat network* that we had before
	- it's different from the *default* hardhat network
	- so we'll need to add this new network in our *hardhat.config.js* and then we'll be able to interact with this network
		- we add as a `localhost` network, the *url* we get the one that was given to us when we run `yarn hardhat node` and the *chainId* is 31337, same as the default network
		- *accounts* we don't need to explicitly define the accounts, because when we run hardhart it'l give us the accounts

`The hardhat Console`
- is a javascript environment for us to run javascript commands to interact with any blockchain
- we can access this *hardhat console* by running `yarn hardhat console --network [name the network] ` 
	- even for the *testnets*
- in this console, we can do ***ANYTHING*** that we do inside a *deploy.js* file
- then after we're inside the console, we can deploy a contract and call the functions that we declared inside the contract from the *console* 

`Running tests` 
- hardhat testing works with the *mocha* framework
- To start we're going to define our test, `name` and a `function`
	- Inside each `describe` that we declare, we're going to have a `beforeEach
		- this function is going to tell us what to do before each of our `it()` 
	- And after the `beforeEach()` a bunch of `it()`
		- are where we actually write the code for all the tests
		- here we're going to pass in for the *beforeEach(..HERE..)* a function that will tell what to do before running any of the tests 
	- we can also have more `describe("name", () => {})` inside of the first *describe*, it's good for modularization in the testing 
	- *it()* 
		- inside the *it()* we can validate using *expect* or *assert*
		- we're going to import them from *'chai'* 
			- `const { expect, assert } = require("chai")` 
- to run the tests, we use the command below
	- `yarn hardhat test` 
- *RUN ONLY ONE TEST* 
	- we can use the command `yarn hardhat test --grep [keyword in here]` 
		- using this command, we can specify to only run the tests that have that *key word* that you've specified above
	- *ALSO* we can add the keyword *only* to the *it* like this `it.only(""...)` to the test that we want to run, then when we run `yarn hardhat test` it'll run only the ones with this keyword

`Hardhat Gas Reporter` 
- having our tests, we can also test how much *gas* our functions cost
- we can use the package `hardhat-gas-reporter` that's linked to every test of ours and can give us aproximetly how much gas one of our functions cost
	- we can add this one with the command `yarn add hardhat-gas-reporter --dev` 
	- after we installed the package, we can go to the *hardhat.config.js* and add some parameters so we can work with this gas feature
	- right under *etherscan* section we add a new one called `gasReporter: { enabled: true }`
	- and at the top we need to add the *require* for the package `require("hardhat-gas-reporter")` 
	- now when we run our tests, it'll automatically run the gas reporter together for us
	- it'll show us how much each method we called in the tests cost in gas, giving us a easy way to better optimize our functions
	- *WE CAN MAKE EVEN BETTER* taking the output of the gas reporter to a file and add some more parameters in the  *hardhat.config.js*
		- *outputFile* the name of the file to save the gas report
		- *noColors* this is because when output to a file, it get's all mess up
		- *currency* we can get the cost for each function in USD
			- to get this right, we need to use a API from *coinmarketcap* to be able to know the prices
			- then we add the *coinmarketcap* and set the API KEY for it 
		- `OTHER CHAINS` 
			- we can see how much it would cost to deploy to other chains, we just need to see in the *hardhat gas reporter* package in npm the tokens that are supported and add the *token* property also informing the TOKEN
				- EG: token: "MATIC"

`Solidity Test Coverage` 
- we can use a tool called `solidity-coverage` that's also a hardhat plugin that we can use
- this is a tool that goes throught every line of our *.sol* files and sees how many of them is covered by our tests
- we can add this package using the command `yarn add --dev solidity-coverage` 
- then we add to our *hardhat.config.js* the same as the other plugins 
- there's some more configurations that we can add like the ones we did in the *gas reporter* but we're going to use the default now
- to see how much of our code is covered by our tests we can run the command below
	- `yarn hardhat coverage` 
		- this generates a file called *coverage.json* and a *coverage* folder that we can add to our *.gitignore* file

`Hardhat Waffle` 
- is the plugin `@nomiclabs/hardhat-waffle` that enables us to use the Waffle testing framework
- is a framework that allows us to do some pretty advanced testing 

`Best README Template` 
https://github.com/othneildrew/Best-README-Template

`Using Typescript in the project`
- we need to add some packages for using typescript in our projects
	- `yarn add --dev @typechain/ethers-v5 @typechain/hardhat @types/chai @types/node @types/mocha ts-node typechain typescript` 
	- we need to convert all of our *.js* files into *.ts* files 
	- we're going to also add a file called *tsconfig.json* 
- in testing we have a trouble because we declare a variable that would be of type *our contract* but for this be given right, we need to use a tool called *TypeChain* 
	- it has a hardhat plugin that allows us to use in our project with typescript 
	- we will need to go to our *hardhat.config.ts* and import this package `import "@typechain/hardhat"` 
	- now if we run the command *yarn hardhat* we'll have a new task called *typechain* that has as description *Generate typechain typings for compiled contracts*, this will enable our variable to have the typing of our compiled contract 
		- we'll run the command `yarn hardhat typechain` 
		- this will create a new folder called *typechain-types* that will have the types for all of our contracts 
			- we want to add in the *.gitignore* file the *typechain* and *typechain-types* so we don't push them to github
		- after in the *test-deploy.ts* file we'll import the types so we can set to the variables
			- `import { SimpleStorage, SimpleStorage__factory } from "../typechain-types"` 
