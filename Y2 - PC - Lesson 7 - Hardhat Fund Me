`Hardhat Setup` 
- create a new folder to hold the project
- then to add *hardhat* we run `yarn add --dev hardhat` 
- then `yarn hardhat` 
- we'll create our contracts *FundMe.sol* and *PriceConverter.sol*
	- remembering to before compiling, check the solidity version in *hardhat.config.js* to match the one that we're using in our contracts 
- if we try to compile with `yarn hardhat compile` we run into an error. It'll tell us that we need the package for the *chainlink* contracts that we used
	- we install using `yarn add --dev @chainlink/contracts` 
	- after we installed the *chainlink/contracts* we can run `yarn hardhat compile` and it'll work

`Linting`
- `.solhint.json` 
	- is known as a solidity linter
	- linting is a process of running a program that will analyse code for potential errors
	- ESLint is a way to lint JS code
	- Solint is for Solidity
		- when using in our project, we can run in a file using the command `yarn solhint [path to the file] 
		- it's good to check for holes in best practices in our code 

`Hardhat Deploy Package`
- it will make easier to us to keep track of the contracts that are deployed and also facilitate our tests
- to add to our project we'll run the command below
	- `yarn add --dev hardhat-deploy` 
	- After we will go to our *hardhar.config.js* to add the require for the package as below
		- `require("hardhat-deploy")` 
		- after we can delete our *deploy.js* file, since we're not going to use it anyway
	- we will create a new folder called *deploy* that is where the *hardhat deploy* package will use to deploy our contracts and where we will put our scripts
- we will run the command below that is where we will get the *@nomiclabs/gardhat-ethers* and **override** with the *hardhat-deploy-ethers* . In the last project we used the *hardhat-ethers* to override the *ethers* package
	- `yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers ` 
	- this will enable *ethers* to keep track and remember of every deployment that we make in our contract
	- looking in our *package.json* the line below is meant to show that now the *@nomiclabs/hardhat-ethers* package is now overriden by *npm:hardhat-deploy-ethers* 
		- `"@nomiclabs/hardhat-ethers": "npm:hardhat-deploy-ethers"`
- this way this package works is that *EVERY* script that is added to the *deploy* folder will be executed when we run the command `yarn hardhat deploy` 
	- a good practice is to number the scripts so they'll run in the order that you want to
		- EG `01-deploy-fund-me.js` 
- different from the other script that we've made to deploy our *simpleStorage* contract, in this we will not create a *main* function and call it, we will only define a function and export it as default so the *hardhat deploy* package can run
- we then define inside a script a function that the hardhat deploy will call it, like below 
```javascript
					 // hre - Hardhat Runtime Environment
module.exports = async (hre) => {}
```
- we can pass the *hre* as above or we can get only the variables/functions that we want using the syntax below 
```javascript
module.exports = async ({ getNamedAccounts, deployments }) => {}
```
- the function *getNamedAccounts()* is a way that facilitates for us to get accounts, the accounts that are defined in the *accounts* array in the *networks* property in the *hardhat.config.js* file, by names, that we can define in our *hardhat.config.js*. 
	- This will enable us to give a name to each array spot, to make it easier to get that account, and below we name the account in the spot 0 with the name *deployer* 
```javascript
namedAccounts: {
	deployer: {
		default: 0,
	}
},
```
- the *deployer* account that we named before is the account that we will grab to use in our *01-deploy-fund-me.js* script to deploy our contract
- to *DEPLOY* our contract different from the other project we won't be needing to use a *contract factory*, we will use the function *deploy* that we got from *deployments* 
	- to be able to use different addresses to our *chainlin data feed* we will use a trick that the *AAVE* protocol uses that is create a helper file to give us a little help in this 
		- we will create a file called *helper-hardhat-config.js*
		- and inside, we define a object called *networkConfig* where we will define the networks that we're going to deploy our contract and define the address for the contract of the data feed in that chain
		- after in our *01-deploy-fund-me.js* we will use to get the contract address by using the *chainId* as key value
```javascript 
// here we're gonna define addresses for data feeds that will help us deploy to different chains
const networkConfig = {
	4: {
		name: "goerli",
		ethUsdPriceFeedAddress: "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
	},
	42161: {
	name: "arbitrum",
		ethUsdPriceFeedAddress: "0x639Fe6ab55C921f74e7fac1ee960C0B6293ba612"
	},
	//31337 hardhat Network
}

module.exports = {
	networkConfig,
}
```

`Mocking & helper-hardhat-config` 
- mocking is how we can create *fake data* to use to test locally
- we will go back to our *deploy* folder and create a new file called *00-deploy-mocks.js* 
	- this file will deploy our *mock* contract that we will use as data feed when we're running in a *local node* or in *hardhat network*
	- the mock contract we can use one that *chainlink* already has defined for us, and we can use the advantage of the *node_modules* folder to create a simple contract file and just import the *MockV3Aggregator.sol* that chainlink already has for us to use
```solidity
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol";	
```

`Different versions of solidity contracts` 
- we are going to run into issues that we will have our contract in one version and try to use another that's in other version
- if we compile using *yarn hardhat compile* we will get an error
- we can resolve this by going in our *hardhat.config.js* and we can change the way we pass the *solidity* property to pass multiple versions so our compiler can compile contracts in different versions
```solidity
// solidity: "0.8.8", // before using one compiler
solidity: {  // using multiple compilers
	compilers: [
		{ version: "0.8.8" },
		{ version: "0.6.6" },
	],
},
```
- after we can run the command `yarn hardhat compile` to compile our contracts and we will have our *MockV3Aggregator.sol* that we can deploy to have our data feed for chainlink in local testnets 
- to know if we will deploy our *mock contract* we will add in the *helper-hardhat-config.js* a variable where we will declare our *development chains*. We will export them as we did with our *networkConfig* to use
	- `const developmentChains = ["hardhat", "localhost"]` 
- after we will import in our *00-deploy-mocks.js* and use to validate if we're in a development network

- We can execute only one deploy script by adding the property in the example below in the end of the script that we want to declare and running the command `yarn hardhat deploy --tags [use the tag that was declared]` 
	- `module.exports.tags = ["all", "mocks"]` 

`ABOUT LOCAL NODE`
- one awesome thing about *hardhat deploy* is that after we create our scripts when we run our *local NODE* it'll automatically deploy our scripts for us in that network

`Utils folder` 
- this is a general folder where we will add different scripts that we can use acrosss different deploy scripts, without repeating code. We centralize functions
- is where we will create our *verify.js* file to have our function that automatically verify our contract in etherscan

`Testnet Demo` 
- in our *hardhat.config.js* we can add a property in the *networks* section where we tell how many blocks we want to wait in each network that we have configured 
	- we just need to go in one of our networks that are configured and add the *blockConfirmatons: [number of blocks to wait]* as we show in the example below
```javascript
		goerli: {
			url: GOERLI_RPC_URL,
			accounts: [GOERLI_PRIVATE_KEY],
			chainId: 5,
			**blockConfirmations: 6,**
		},
```
- after we go back to our deploy script and add a new property in the call of the *deploy* function to pass to the *hardhat deploy* the number of confirmations that must wait, as the example below
```javascript 
	const fundMe = await deploy("FundMe", {
		from: deployer,
		args,
		log: true,
		**waitConfirmations: network.config.blockConfirmations || 1,**
	})
```
	- by using this 'log' property it'll give us some automatic logs when we deploy our contract 
```shell
lesson-7-hardhat-fund-me git:(main) ✗ yarn hardhat deploy --network goerli
yarn run v1.22.19
warning package.json: No license field
$ /Users/realaldc/Documents/www/blockchain/solidity-studies/fullstack-web3-patrick-collins/lesson-7-hardhat-fund-me/node_modules/.bin/hardhat deploy --network goerli
Nothing to compile
deploying "FundMe" (tx: 0xc45a6bfed6badd1c86434a528d5fbf0fcc054ebaf3de9f4e492591248b614837)...: deployed at 0x9b6e0ae98e0390dAd042d4e2653a4684681FD1Df with 901252 gas
Verifying contract...
Nothing to compile
Successfully submitted source code for contract
contracts/FundMe.sol:FundMe at 0x9b6e0ae98e0390dAd042d4e2653a4684681FD1Df
for verification on the block explorer. Waiting for verification result...

Successfully verified contract FundMe on Etherscan.
https://goerli.etherscan.io/address/0x9b6e0ae98e0390dAd042d4e2653a4684681FD1Df#code
-----------------------------------------------------------
✨  Done in 135.38s.
```

`Solidity Style Guide` 
- there's some conventions for naming and ordering that we can follow so we make our contract look more professional
	- we can find this style guide in the *docs.soliditylan.org*, just search for *style guide* 
- Order of Layout
	1. Pragma statements
	2. Import statements
	3. Error codes (eg: *error NotOwner()*)
	4. Interfaces
	5. Libraries
	6. Contracts
	- Inside each contract, library or interface use the following order:
		1. Type declarations
		2. State variables 
		3. Events
		4. Modifiers
		5. Functions
			- Functions have a sequence that we should follow along as below
			1. *constructor*
			2. *receive*
			3. *fallback*
			4. *external*
			5. *public*
			6. *internal*
			7. *private*
			8. *view / pure*
- `NatSpec` : Ethereum Natural Language Specification Format 
	- is a way to document our code to provide rich documentation for functions, return variables and so forth.
	- the reason that we should do this in versions of our contract is that we can create automatic documentation of it after using `solc` 

`Testing Fund Me`
- we're going to write tests to of course test what was implemented but also, to make the functions more *cheaper* and *faster* to execute
- we're going to work with *two* types of tests now
	- `Unit` 
		- unit tests are done locally
		- we are going to test minimal portions of our code in this tests
		- we can do these in *local hardhat* or a *forked hardhat* networkFund
	- `Staging` 
		- staging or integration tests are done on a TESTNET
		- it would be the last stop before deploying to a mainnet
- `fixture` 
	- allows us to run our entire *deploy folder* with as many *tags* as we want
	- we need to imoprt *deployments* from *hardhat* to be able to use the next command that will deploy all scripts in the deploy folder that have the tag that we pass in 
		- `await deploymnets.fixture(["all"])` 
		- the command above will deploy the scripts that have the tag that we passed, in this case is *all* and we will be able to use them in our tests
		- after we need to grab the contracts that we're deployed and we will use *ethers* to get them. After we import ethers from hardhat, we will use the command below to get the contracts that we're deployed
			- `await ethers.getContract("FundMe")` 
			- the above function is provided to ethers by *hardhat-deploy* and will allow us to get the most recent deployed version of the contract by passing their name
- *TESTS THAT FAIL AND ARE REVERTED*
	- well if we just call an function from our contract and we maybe don't send enough ETH as parameter, or forget a parameter our test is goin to fail, but not with as an failed test, but an EVM error
	- here's where comes in our *waffle* testing shows it's force, because with waffle we can do some tests and *EXPECT* something to happen, like *a transaction to be reverted*. We import *expect* from *chai* just like we did with *assert* 
		- `await expect(fundMe.fund()).to.be.revertedWith("You need to spend more ETH!")` 
		- to pass the value in the test we can use the library *ethers.utils.parseEther("1")* to convert a number to the value in ETH, this 1 will have the decimals with him after we use the *.parseEther()* 
		- there's also in the documentation of *ethers* a function called *.parseUnits(....)* where we can parse any units of ETH, like *ether, gwei,* 
- *RUN ONLY INE TEST* 
	- we can do this using the flag *--grep "some part of the test name"*  and it'll run only the test that has that string in the declaration
		- EG: `yarn hardhat test --grep "amount funded"` 
	
- *PROCESS TO THINK ABOUT TESTS*
	- *Arrange* you want to arrange the test
	- *Act* then you want to act
	- *Assert* then you'll run the asserts

- `DEBUGGING`
	- We can use in VSCode *breakpoints* so we are able to debug our code while our scripts and contracts are running
	- we just need to put a breakpoint in some part of our code and then click in the option *Run and Debug* on the sidebar, and then click in *JavaScript Debug Terminal*.
	- it'll open a new terminal where when we run *yarn hardhat test* it will run our script and stop right in our breakpoint

`console.log && Debugging`
- we can use *console.log()* inside a solidity file using hardhat
- we just need to have the following import *import "hardhat/console.sol";* 
- and then boom, we can use our beloved *console.log("info here")* as we always use in JS

`Storage in solidity`
- *constant* and *immutable* variables doesn't take storage spots, because they're actually part of the contracts bytecode
- variables that are declared *inside functions* doesn't take storage sports either, because they just exist in the duration of the function, after they get deleted from the memory that they were using
- Naming convention to a *storage variable* is using a *s_* as prefix to the name of the variable

`Gas optimizations using storage Knowledge`
- we added a function called *cheaperWithdraw* where we had noticed that when we withdraw from the contract having multiple funders, we would be reading a lot from a *storage variable*.
- this costs more gas, because reading and writting to storage are expensive actions to do
- so we made this *cheaperWithdraw* where we can create a local variable in *memory* where we can assign the *s_funders* array value to ir, and in this way we're only going to read from storage one time
	- EG: `address[] memory funders = s_funders;` 
- all the other times, we'll be reading from this local variable and it'll save us some gas
 - FYI *internal* and *private* variables are also cheaper gas wise, so we refactored our contract a little bit more 

`Staging tests` 
- this are the tests that will run in a *REAL TESTNET* 
- this is the test that we're going to run after we do a deploy, just to check if everything's okay
- We'll use the following syntax `developmentChains.includes(network.name) ? describe.skip : describe("FundMe", ...)` to validate if we're not in a development chain, then we will run our test
- to run our *staging tests* we need to add the flag *--network [name of testnet]* to run the tests
	- EG: `yarn hardhat test --network goerli` 


`Runnung Scripts on a Local Node`
- We're first going to write a script called *fund.js* that will allow us to fund our contract if we want to 
- to run the script we just created, we can run `yarn hardhat node` to get our local node running and with our contracts deployed
	- then to run the script itself we will run the following command `yarn hardhat run scripts/fund.js --network localhost` 

`Adding scripts to your package.json` 
- we can go to our *package.json* file and add a property named *"scripts"* where we can declare our scripts with a nickname that is shorter than the whole command, for example the one below.
	- EG: `"test": "yarn hardhat test"` 
	- After we declare this *test* in our *scripts* property in the package.json file we only need to run `yarn test` and it'll run the script, with a shorter and easier command


- Project code repository: 
	- https://github.com/0xREALAldc/Y2-PC-lesson-7-hardhat-fund-me-


